{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useEffect } from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport ShopStack from \"./ShopStack\";\nimport CartStack from \"./CartStack\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport { colors } from \"../Global/Colors\";\nimport { Ionicons, Fontisto, Foundation, FontAwesome5 } from \"@expo/vector-icons\";\nimport OrderStack from \"./OrderStack\";\nimport AuthStack from \"./AuthStack\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport MyProfileStack from \"./MyProfileStack\";\nimport { getSession } from \"../SQLite\";\nimport { setUser } from \"../features/User/userSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Tab = createBottomTabNavigator();\nvar Navigator = function Navigator() {\n  var email = \"f@f.com\";\n  var dispatch = useDispatch();\n  useEffect(function () {\n    _asyncToGenerator(function* () {\n      try {\n        console.log('Getting session...');\n        var session = yield getSession();\n        console.log('Sesion: ');\n        console.log(session);\n        if (session != null && session.rows.length) {\n          var user = session.rows._array[0];\n          dispatch(setUser(user));\n        }\n      } catch (error) {\n        console.log('Error getting session');\n        console.log(error.message);\n      }\n    })();\n  }, []);\n  return _jsx(SafeAreaView, {\n    style: styles.container,\n    children: _jsx(NavigationContainer, {\n      children: email ? _jsxs(Tab.Navigator, {\n        screenOptions: {\n          headerShown: false,\n          tabBarShowLabel: false,\n          tabBarStyle: styles.tabBar\n        },\n        children: [_jsx(Tab.Screen, {\n          name: \"Shop\",\n          component: ShopStack,\n          options: {\n            tabBarIcon: function tabBarIcon(_ref2) {\n              var focused = _ref2.focused;\n              return _jsx(View, {\n                children: _jsx(Fontisto, {\n                  name: \"shopping-store\",\n                  size: 24,\n                  color: focused ? \"black\" : \"gray\"\n                })\n              });\n            }\n          }\n        }), _jsx(Tab.Screen, {\n          name: \"Cart\",\n          component: CartStack,\n          options: {\n            tabBarIcon: function tabBarIcon(_ref3) {\n              var focused = _ref3.focused;\n              return _jsx(View, {\n                children: _jsx(Foundation, {\n                  name: \"shopping-cart\",\n                  size: 30,\n                  color: focused ? \"black\" : \"gray\"\n                })\n              });\n            }\n          }\n        }), _jsx(Tab.Screen, {\n          name: \"Orders\",\n          component: OrderStack,\n          options: {\n            tabBarIcon: function tabBarIcon(_ref4) {\n              var focused = _ref4.focused;\n              return _jsx(View, {\n                children: _jsx(FontAwesome5, {\n                  name: \"list-ul\",\n                  size: 24,\n                  color: focused ? \"black\" : \"gray\"\n                })\n              });\n            }\n          }\n        }), _jsx(Tab.Screen, {\n          name: \"MyProfile\",\n          component: MyProfileStack,\n          options: {\n            tabBarIcon: function tabBarIcon(_ref5) {\n              var focused = _ref5.focused;\n              return _jsx(View, {\n                style: styles.item,\n                children: _jsx(Ionicons, {\n                  name: \"person-circle-outline\",\n                  size: 24,\n                  color: focused ? \"black\" : \"gray\"\n                })\n              });\n            }\n          }\n        })]\n      }) : _jsx(AuthStack, {})\n    })\n  });\n};\nexport default Navigator;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: Platform.OS === \"android\" ? StatusBar.currentHeight : 0\n  },\n  tabBar: {\n    backgroundColor: colors.pink,\n    shadowColor: \"black\",\n    height: 60\n  }\n});","map":{"version":3,"names":["React","useEffect","NavigationContainer","StatusBar","ShopStack","CartStack","createBottomTabNavigator","colors","Ionicons","Fontisto","Foundation","FontAwesome5","OrderStack","AuthStack","useDispatch","useSelector","MyProfileStack","getSession","setUser","jsx","_jsx","jsxs","_jsxs","Tab","Navigator","email","dispatch","_asyncToGenerator","console","log","session","rows","length","user","_array","error","message","SafeAreaView","style","styles","container","children","screenOptions","headerShown","tabBarShowLabel","tabBarStyle","tabBar","Screen","name","component","options","tabBarIcon","_ref2","focused","View","size","color","_ref3","_ref4","_ref5","item","StyleSheet","create","flex","paddingTop","Platform","OS","currentHeight","backgroundColor","pink","shadowColor","height"],"sources":["C:/Users/federico.currao/Documents/OtrosFC/App/ProyectoFinalAppReactNativeFcurrao/src/Navigation/Navigator.jsx"],"sourcesContent":["import {\r\n    Platform,\r\n    Pressable,\r\n    SafeAreaView,\r\n    StyleSheet,\r\n    Text,\r\n    View,\r\n} from \"react-native\";\r\nimport React, { useEffect } from \"react\";\r\n\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { StatusBar } from \"react-native\";\r\nimport ShopStack from \"./ShopStack\";\r\nimport CartStack from \"./CartStack\";\r\n\r\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\r\nimport { colors } from \"../Global/Colors\";\r\nimport {\r\n    Ionicons,\r\n    Fontisto,\r\n    Foundation,\r\n    FontAwesome5,\r\n} from \"@expo/vector-icons\";\r\nimport OrderStack from \"./OrderStack\";\r\nimport AuthStack from \"./AuthStack\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport MyProfileStack from \"./MyProfileStack\";\r\nimport { getSession } from \"../SQLite\";\r\nimport { setUser } from \"../features/User/userSlice\";\r\n\r\nconst Tab = createBottomTabNavigator();\r\n\r\nconst Navigator = () => {\r\n    // const { email, localId } = useSelector((state) => state.userReducer.value); \r\n    const  email = \"f@f.com\";  // testeando TDD\r\n    \r\n\r\n    const dispatch = useDispatch()\r\n\r\n    //Get stored sessions\r\n     useEffect(()=> {\r\n        (async ()=> {\r\n            try {\r\n                console.log('Getting session...');\r\n                const session = await getSession()\r\n                console.log('Sesion: ');\r\n                console.log(session);\r\n                if (session?.rows.length) {\r\n                    const user = session.rows._array[0]\r\n                    dispatch(setUser(user))\r\n                }\r\n            } catch (error) {\r\n                console.log('Error getting session');\r\n                console.log(error.message);\r\n            }\r\n        })()\r\n    }, [])  \r\n\r\n    return (\r\n        <SafeAreaView style={styles.container}>\r\n            <NavigationContainer>\r\n                {email ? (\r\n                    <Tab.Navigator\r\n                        screenOptions={{\r\n                            headerShown: false,\r\n                            tabBarShowLabel: false,\r\n                            tabBarStyle: styles.tabBar,\r\n                        }}\r\n                    >\r\n                        <Tab.Screen\r\n                            name=\"Shop\"\r\n                            component={ShopStack}\r\n                            options={{\r\n                                tabBarIcon: ({ focused }) => {\r\n                                    return (\r\n                                        <View>\r\n                                            <Fontisto\r\n                                                name=\"shopping-store\"\r\n                                                size={24}\r\n                                                color={\r\n                                                    focused ? \"black\" : \"gray\"\r\n                                                }\r\n                                            />\r\n                                        </View>\r\n                                    );\r\n                                },\r\n                            }}\r\n                        />\r\n                        <Tab.Screen\r\n                            name=\"Cart\"\r\n                            component={CartStack}\r\n                            options={{\r\n                                tabBarIcon: ({ focused }) => {\r\n                                    return (\r\n                                        <View>\r\n                                            <Foundation\r\n                                                name=\"shopping-cart\"\r\n                                                size={30}\r\n                                                color={\r\n                                                    focused ? \"black\" : \"gray\"\r\n                                                }\r\n                                            />\r\n                                        </View>\r\n                                    );\r\n                                },\r\n                            }}\r\n                        />\r\n                        <Tab.Screen\r\n                            name=\"Orders\"\r\n                            component={OrderStack}\r\n                            options={{\r\n                                tabBarIcon: ({ focused }) => {\r\n                                    return (\r\n                                        <View>\r\n                                            <FontAwesome5\r\n                                                name=\"list-ul\"\r\n                                                size={24}\r\n                                                color={\r\n                                                    focused ? \"black\" : \"gray\"\r\n                                                }\r\n                                            />\r\n                                        </View>\r\n                                    );\r\n                                },\r\n                            }}\r\n                        />\r\n                        <Tab.Screen\r\n                            name=\"MyProfile\"\r\n                            component={MyProfileStack}\r\n                            options={{\r\n                                tabBarIcon: ({ focused }) => {\r\n                                    return (\r\n                                        <View style={styles.item}>\r\n                                            <Ionicons\r\n                                                name=\"person-circle-outline\"\r\n                                                size={24}\r\n                                                color={\r\n                                                    focused ? \"black\" : \"gray\"\r\n                                                }\r\n                                            />\r\n                                        </View>\r\n                                    );\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Tab.Navigator>\r\n                ) : (\r\n                    <AuthStack />\r\n                )}\r\n            </NavigationContainer>\r\n        </SafeAreaView>\r\n    );\r\n};\r\n\r\nexport default Navigator;\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        paddingTop: Platform.OS === \"android\" ? StatusBar.currentHeight : 0,\r\n    },\r\n    tabBar: {\r\n        backgroundColor: colors.pink,\r\n        shadowColor: \"black\",\r\n        height: 60,\r\n    },\r\n});\r\n\r\n// import { Platform, Pressable, SafeAreaView, StyleSheet, Text, View } from 'react-native'\r\n// import React from 'react'\r\n// import { NavigationContainer } from '@react-navigation/native'\r\n// import { StatusBar } from 'react-native'\r\n// import ShopStack from './ShopStack'\r\n// import CartStack from './CartStack'\r\n\r\n// import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\n// import { colors } from '../Global/Colors'\r\n// import { \r\n//     Ionicons,\r\n//     Fontisto,\r\n//     Foundation,\r\n//     FontAwesome5\r\n// } from '@expo/vector-icons';\r\n// import OrderStack from './OrderStack'\r\n// import AuthStack from './AuthStack'\r\n// import { useSelector } from 'react-redux'\r\n// import MyProfileStack from './MyProfileStack'\r\n\r\n// const Tab = createBottomTabNavigator()\r\n\r\n// const Navigator = () => {\r\n\r\n//     const {email} = useSelector(state => state.userReducer.value)\r\n//   return (\r\n//     <SafeAreaView style = {styles.container}>\r\n//         <NavigationContainer>\r\n//             {\r\n//                 email ? \r\n//                 <Tab.Navigator\r\n//                     screenOptions={{\r\n//                         headerShown: false,\r\n//                         tabBarShowLabel: false,\r\n//                         tabBarStyle: styles.tabBar,\r\n//                     }}\r\n//                 >\r\n//                     <Tab.Screen \r\n//                         name='Shop'\r\n//                         component={ShopStack}\r\n//                         options={{\r\n//                             tabBarIcon: ({focused}) => {\r\n//                                 return (\r\n//                                     <View>\r\n//                                         <Fontisto name=\"shopping-store\" size={24} color={focused ? \"black\": \"gray\"} />\r\n//                                     </View>\r\n//                                 )\r\n//                             }\r\n//                         }}\r\n//                     />\r\n//                     <Tab.Screen\r\n//                         name='Cart'\r\n//                         component={CartStack}\r\n//                         options={{\r\n//                             tabBarIcon: ({focused}) => {\r\n//                                 return (\r\n//                                     <View>\r\n//                                         <Foundation name=\"shopping-cart\" size={30} color={focused ? \"black\": \"gray\"} />    \r\n//                                     </View>\r\n//                                 )\r\n//                             }\r\n//                         }}\r\n//                     />\r\n//                     <Tab.Screen\r\n//                         name='Orders'\r\n//                         component={OrderStack}\r\n//                         options={{\r\n//                             tabBarIcon: ({focused}) => {\r\n//                                 return (\r\n//                                     <View>\r\n//                                         <FontAwesome5 name=\"list-ul\" size={24} color={focused ? \"black\": \"gray\"} />\r\n//                                     </View>\r\n//                                 )\r\n//                             }\r\n//                         }}\r\n//                     />\r\n//                     <Tab.Screen\r\n//                         name=\"MyProfile\"\r\n//                         component={MyProfileStack}\r\n//                         options={{\r\n//                             tabBarIcon: ({ focused }) => {\r\n//                                 return (\r\n//                                     <View style={styles.item}>\r\n//                                         <Ionicons\r\n//                                             name=\"person-circle-outline\"\r\n//                                             size={24}\r\n//                                             color={\r\n//                                                 focused\r\n//                                                     ? 'black'\r\n//                                                     : 'gray'\r\n//                                             }\r\n//                                         />\r\n//                                     </View>\r\n//                                 );\r\n//                             },\r\n//                         }}\r\n//                     />\r\n//                 </Tab.Navigator>\r\n//                 :<AuthStack/>\r\n//             }\r\n//         </NavigationContainer>\r\n//     </SafeAreaView>\r\n//   )\r\n// }\r\n\r\n// export default Navigator\r\n\r\n// const styles = StyleSheet.create({\r\n//     container: {\r\n//       flex: 1,\r\n//       paddingTop: Platform.OS === \"android\" ? StatusBar.currentHeight : 0\r\n//     },\r\n//     tabBar: {\r\n//         backgroundColor: colors.pink,\r\n//         shadowColor: 'black',\r\n//         height: 60,\r\n//     }\r\n//   })\r\n\r\n\r\n// // import { Platform, Pressable, SafeAreaView, StyleSheet, Text, View } from 'react-native'\r\n// // import React from 'react'\r\n\r\n// // import { NavigationContainer } from '@react-navigation/native'\r\n// // import { StatusBar } from 'react-native'\r\n// // import ShopStack from './ShopStack'\r\n// // import CartStack from './CartStack'\r\n// // import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\n// // import { colors } from '../Global/Colors'\r\n// // import { \r\n// //     Ionicons,\r\n// //     Fontisto,\r\n// //     Foundation, \r\n// //     FontAwesome5\r\n// // } from '@expo/vector-icons';\r\n// // import OrderStack from './OrderStack'\r\n// // import AuthStack from './AuthStack'\r\n// // import { useSelector } from 'react-redux'\r\n// // import MyProfileStack from './MyProfileStack'\r\n\r\n// // const Tab = createBottomTabNavigator()\r\n\r\n// // const Navigator = () => {\r\n\r\n    \r\n\r\n// //     const {email} = useSelector(state => state.userReducer.value)\r\n// //   return (\r\n// //     <SafeAreaView style = {styles.container}>\r\n// //         <NavigationContainer>\r\n// //             {\r\n// //                 email ? <>\r\n// //                 <Tab.Navigator\r\n// //                     screenOptions={{\r\n// //                         headerShown: false,\r\n// //                         tabBarShowLabel: false,\r\n// //                         tabBarStyle: styles.tabBar,\r\n// //                     }}\r\n// //                 >\r\n// //                     <Tab.Screen \r\n// //                         name='Shop'\r\n// //                         component={ShopStack}\r\n// //                         options={{\r\n// //                             tabBarIcon: ({focused}) => {\r\n// //                                 return (\r\n// //                                     <View>\r\n// //                                         <Fontisto name=\"shopping-store\" size={24} color={focused ? \"black\": \"gray\"} />\r\n// //                                     </View>\r\n// //                                 )\r\n// //                             }\r\n// //                         }}\r\n// //                     />\r\n// //                     <Tab.Screen\r\n// //                         name='Cart'\r\n// //                         component={CartStack}\r\n// //                         options={{\r\n// //                             tabBarIcon: ({focused}) => {\r\n// //                                 return (\r\n// //                                     <View>\r\n// //                                         <Foundation name=\"shopping-cart\" size={30} color={focused ? \"black\": \"gray\"} />    \r\n// //                                     </View>\r\n// //                                 )\r\n// //                             }\r\n// //                         }}\r\n// //                     />\r\n// //                     <Tab.Screen\r\n// //                         name='Orders'\r\n// //                         component={OrderStack}\r\n// //                         options={{\r\n// //                             tabBarIcon: ({focused}) => {\r\n// //                                 return (\r\n// //                                     <View>\r\n// //                                         <FontAwesome5 name=\"list-ul\" size={24} color={focused ? \"black\": \"gray\"} />\r\n// //                                     </View>\r\n// //                                 )\r\n// //                             }\r\n// //                         }}\r\n// //                     />\r\n// //                     <Tab.Screen\r\n// //                         name=\"MyProfile\"\r\n// //                         component={MyProfileStack}\r\n// //                         options={{\r\n// //                             tabBarIcon: ({ focused }) => {\r\n// //                                 return (\r\n// //                                     <View style={styles.item}>\r\n// //                                         <Ionicons\r\n// //                                             name=\"person-circle-outline\"\r\n// //                                             size={24}\r\n// //                                             color={\r\n// //                                                 focused\r\n// //                                                     ? 'black'\r\n// //                                                     : 'gray'\r\n// //                                             }\r\n// //                                         />\r\n// //                                     </View>\r\n// //                                 );\r\n// //                             },\r\n// //                         }}\r\n// //                     />\r\n// //                 </Tab.Navigator>\r\n// //                </> :<AuthStack/>\r\n// //             }\r\n// //         </NavigationContainer>\r\n// //     </SafeAreaView>\r\n// //   )\r\n// // }\r\n\r\n// // export default Navigator\r\n\r\n// // const styles = StyleSheet.create({\r\n// //     container: {\r\n// //       flex: 1,\r\n// //       paddingTop: Platform.OS === \"android\" ? StatusBar.currentHeight : 0\r\n// //     },\r\n// //     tabBar: {\r\n// //         backgroundColor: colors.pink,\r\n// //         shadowColor: 'black',\r\n// //         height: 60,\r\n// //     }\r\n// //   })\r\n\r\n\r\n  \r\n// // // import { StatusBar } from 'expo-status-bar';\r\n// // import Header from '../Components/Header';\r\n// // import Home from '../Screens/Home';\r\n// // import ItemListCategory from '../Screens/ItemListCategory';\r\n// // import { useState } from 'react';\r\n// // import ItemDetail from '../Screens/ItemDetail';\r\n// // import ShopStack from './ShopStack';\r\n// // import { AntDesign } from '@expo/vector-icons';\r\n// // import { Entypo } from '@expo/vector-icons';\r\n// // import React from 'react'\r\n// // import { StyleSheet, Pressable, Text, View, SafeAreaView, StatusBar, Platform } from 'react-native';\r\n// // import { NavigationContainer } from '@react-navigation/native'; \r\n// // import { \r\n// //     Ionicons,\r\n// //     Fontisto,\r\n// //     Foundation,\r\n// //     FontAwesome5\r\n// // } from '@expo/vector-icons';\r\n// // import CartStack from './CartStack';\r\n// // import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\n// // import { FontAwesome } from '@expo/vector-icons';\r\n// // import OrderScreen from '../Screens/OrderScreen';\r\n// // import OrderStack from './OrderStack'; \r\n// // import { useSelector } from 'react-redux';\r\n// // import { useDispatch } from \"react-redux\";\r\n// // import { setUser } from \"../features/User/userSlice\";\r\n \r\n// // import AuthStack from './AuthStack' \r\n// // import MyProfileStack from './MyProfileStack'\r\n\r\n// // const Tab = createBottomTabNavigator()\r\n\r\n// // const Navigator = () => {\r\n    \r\n// //     const dispatch = useDispatch()\r\n// //     const {email} = useSelector(state=> state.userReducer.value) \r\n\r\n// //     const logOut = () =>{\r\n// //         dispatch(\r\n// //             setUser({\r\n// //                 email: \"\",\r\n// //                 idToken: \"\"\r\n// //             })\r\n// //         )\r\n// //     }\r\n    \r\n    \r\n\r\n\r\n   \r\n// //     return (\r\n// //         <SafeAreaView style={styles.container}>\r\n        \r\n        \r\n// //        <NavigationContainer>\r\n// //         { email ? <>\r\n        \r\n// //             <Pressable  onPress={logOut} style={styles.logout}>\r\n// //                     <Text  >LOG OUT</Text>\r\n// //                         </Pressable>        \r\n                        \r\n// //               <Tab.Navigator \r\n// //                 screenOptions={{ \r\n// //                     headerShown: false,\r\n// //                     tabBarShowLabel: false,\r\n// //                     tabBarStyle:  styles.tabBar\r\n// //                     }} \r\n                   \r\n// //                 >\r\n                    \r\n                   \r\n// //                     <Tab.Screen\r\n// //                     name='Shop'\r\n// //                     component={ShopStack}\r\n// //                     options={{tabBarIcon: ({focused}) => {\r\n// //                         return (\r\n// //                             <View>\r\n// //                              <Entypo name=\"shop\" size={30} color={focused ? \"black\" : \"gray\"} />\r\n// //                             </View>\r\n// //                         )\r\n// //                     }}}\r\n// //                     />  \r\n// //                     <Tab.Screen\r\n// //                     name='Cart'\r\n// //                     component={CartStack}\r\n// //                     options={{tabBarIcon: ({focused}) => {\r\n// //                         return (\r\n// //                             <View>\r\n// //                             <AntDesign name=\"shoppingcart\" size={30} color={focused ? \"black\" : \"gray\"} />\r\n// //                              </View>\r\n// //                         )\r\n// //                     }}}\r\n// //                     />   \r\n// //                     <Tab.Screen\r\n// //                     name='Orders'\r\n// //                     component={OrderStack}\r\n// //                     options={{tabBarIcon: ({focused}) => {\r\n// //                         return (\r\n// //                             <View>\r\n// //                           <FontAwesome name=\"list-ol\" size={24} color={focused ? \"black\" : \"gray\"} />\r\n// //                              </View>\r\n// //                         )\r\n// //                     }}}\r\n// //                     />   \r\n// //                     <Tab.Screen\r\n// //                         name=\"MyProfile\"\r\n// //                         component={MyProfileStack}\r\n// //                         options={{\r\n// //                             tabBarIcon: ({ focused }) => {\r\n// //                                 return (\r\n// //                                     <View style={styles.item}>\r\n// //                                         <Ionicons\r\n// //                                             name=\"person-circle-outline\"\r\n// //                                             size={24}\r\n// //                                             color={\r\n// //                                                 focused\r\n// //                                                     ? 'black'\r\n// //                                                     : 'gray'\r\n// //                                             }\r\n// //                                         />\r\n// //                                     </View>\r\n// //                                 );\r\n// //                             },\r\n// //                         }}\r\n// //                     />\r\n// //                 </Tab.Navigator>\r\n// //                 </>\r\n// //             : \r\n// //             <AuthStack></AuthStack>\r\n// //         }\r\n        \r\n// //             </NavigationContainer>\r\n// //         </SafeAreaView>\r\n// //     )\r\n// // }\r\n \r\n// // export default Navigator\r\n\r\n// // const styles = StyleSheet.create({\r\n// //     container: {\r\n// //         zoom:\"85%\", // despues borrar el zoom\r\n// //         flex: 1,\r\n// //         paddingTop: Platform.OS === 'android' ? StatusBar.currentHight : 0\r\n// //     },\r\n// //     logout:{\r\n// //         padding:\"2px\",\r\n// //         textAlignlign: \"center\",\r\n// //         backgroundColor:\"red\",\r\n// //         color: \"black\"\r\n// //     },\r\n// //     tabBar: {\r\n// //         backgroundColor: 'pink',\r\n// //         shadowColor: 'black',\r\n// //         elevation: 3,\r\n// //         position: 'absolute',\r\n// //         bottom: 20,\r\n// //         left: 10,\r\n// //         right: 10,\r\n// //         borderRadius: 15,\r\n// //         height: 60,\r\n// //     }\r\n\r\n// // })"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}